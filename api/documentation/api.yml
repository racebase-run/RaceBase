openapi: "3.0.0"
info:
  description: "This is the API for RaceBase.io, a community sourced running results aggregation website.  You can find out more about     RaceBase at [https://racebase.io](https://racebase.io)."
  version: "1.2"
  title: "RaceBase API"
  termsOfService: "https://racebase.io/terms/"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
    
tags:
- name: "user"
  description: "Routes for dealing with Users"
- name: "search"
  description: "Routes for searching"
- name: "news"
  description: "Routes for getting news posts"
- name: "result"
  description: "Routes for handling results"
- name: "race"
  description: "Routes for handling races"
- name: "auth"
  description: "Routes for authentication"
  
paths:
  /user/claimed/{athlete_id}:
    get: 
      tags: 
      - "user"
      summary: "Check if an athlete ID is claimed"
      parameters: 
      - in: "path"
        name: "athlete_id"
        description: "Athlete ID to be checked"
        required: true
        schema: 
          type: string
      responses:
        200: 
          description: "Successful API call"
        500: 
          description: "Server error"
  /user/{user_id}/races/{page}/{length}: 
    get: 
      tags: 
      - "user"
      summary: "Get a user's results"
      parameters: 
      - name: "user_id"
        in: "path"
        description: "User's ID"
        required: true
        schema: 
          type: string
      - name: "page"
        in: "path"
        required: true
        description: "Which page to get (not actually required)"
        schema: 
          type: string
      - name: "length"
        in: "path"
        required: true
        description: "How long the page should be (not actually required)"
        schema: 
          type: string
      responses: 
        200:
          description: "Successful API call"
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/Races"
  /user/athlete/{athlete_id}:
    get: 
      summary: "Get a user's info based on their athlete_id"
      tags: 
      - "user"
      parameters: 
      - name: "athlete_id"
        in: "path"
        required: true
        schema: 
          type: string
      responses: 
        200: 
          description: "Returns user object with sensitive info removed"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
  /user/{id}:
    parameters: 
    - name: "id"
      in: "path"
      required: true
      description: "User's ID"
      schema: 
        type: string
    get: 
      tags: 
      - "user"
      summary: "Get a user from their ID"
      responses: 
        200: 
          description: "Request successful"
          content: 
            application/json: 
              schema: 
                $ref: "#/components/schemas/User"
        403: 
          description: "Unauthorized"
    put: 
      tags: 
      - "user"
      summary: "Update a user"
      responses: 
        200: 
          description: "Successfully updated"
          content: 
            application/json: 
              schema: 
                $ref: "#/components/schemas/User"
    delete: 
      tags: 
      - "user"
      summary: "Delete a user"
      responses: 
        200: 
          description: "Successfully deleted"
  /user/{userId}/isFollowing/{id}: 
    get: 
      tags: 
      - "user"
      summary: "Check if a user is following another user"
      parameters: 
      - name: "userId"
        in: "path"
        required: true
        description: "ID of the User who's following data you want to check"
        schema: 
          type: string
      - name: "id"
        in: "path"
        required: true
        description: "Athlete ID of user who is or isn't being followed"
        schema: 
          type: string
      responses: 
        200: 
          description: "Request successful"
  /user:
    post:
      tags:
      - "user"
      summary: "Create a new user"
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses: 
        500: 
          description: "Server Error"
  /user/{id}/profile_pic: 
    post: 
      tags: 
      - "user"
      summary: "Update user's profile pic"
      parameters: 
      - name: "id"
        in: "path"
        required: true
        description: "ID of User who's pic you want to update"
        schema: 
          type: string
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/File'
      responses: 
        200: 
          description: "Successful update"
  /user/{id}/brand_pic: 
    post: 
      tags: 
      - "user"
      summary: "Update user's brand pic"
      parameters: 
      - name: "id"
        in: "path"
        required: true
        description: "ID of User who's pic you want to update"
        schema: 
          type: string
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/File'
      responses: 
        200: 
          description: "Successful update"
  /user/{id}/featured_pic: 
    post: 
      tags: 
      - "user"
      summary: "Update user's featured pic"
      parameters: 
      - name: "id"
        in: "path"
        required: true
        description: "ID of User who's pic you want to update"
        schema: 
          type: string
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/File'
      responses: 
        200: 
          description: "Successful update"
  /user/follow/{id}:
    post: 
      tags: 
      - "user"
      summary: "Follow another user"
      parameters: 
      - name: "id"
        in: "path"
        required: true
        description: "ID of user you want to follow"
        schema: 
          type: string
      responses: 
        200: 
          description: "Successfully followed"
  /user/claim/{id}/{athlete_id}:
    post: 
      tags: 
      - "user"
      summary: "Claim an athlete ID"
      parameters: 
      - name: "id"
        in: "path"
        required: true
        description: "ID of user"
        schema:
          type: string
      - name: "athlete_id"
        in: "path"
        required: true
        description: "Athlete ID to be claimed"
        schema: 
          type: string
      responses: 
        200: 
          description: "Successfully claimed"
  /user/unclaim/{id}/{athlete_id}:
    post: 
      tags: 
      - "user"
      summary: "Unclaim an athlete ID"
      parameters: 
      - name: "id"
        in: "path"
        required: true
        description: "ID of user"
        schema:
          type: string
      - name: "athlete_id"
        in: "path"
        required: true
        description: "Athlete ID to be unclaimed"
        schema: 
          type: string
      responses: 
        200: 
          description: "Successfully unclaimed"
  /user/{id}/alias/{alias}: 
    parameters: 
    - name: "id"
      in: "path"
      required: true
      description: "ID of user"
      schema:
        type: string
    - name: "alias"
      in: "path"
      required: true
      description: "Athlete ID of alias to be added"
      schema: 
        type: string
    post: 
      tags: 
      - "user"
      summary: "Claim an alias"
      responses: 
        200: 
          description: "Successfully added alias"
    delete: 
      tags: 
      - "user"
      summary: "Unclaim an alias"
      responses: 
        200: 
          description: "Successfully deleted alias"
          
  /race/{raceId}:
    get:
      tags:
      - "race"
      summary: "race"
      description: "Returns a single race"
      parameters:
      - name: "raceId"
        in: "path"
        description: "ID of race to return"
        required: true
        schema: 
          type: string
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid ID supplied"
  /auth/login:
    post:
      tags:
      - "auth"
      summary: "Logs in user"
      description: ""
      operationId: "loginUser"
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: "Successful login"
        400:
          description: "Invalid username/password supplied"
  /search/results/{query}/{page}/{length}: 
    get: 
      tags: 
      - "search"
      summary: "Search for a result"
      parameters: 
      - name: "query"
        in: "path"
        required: true
        description: "Search query"
        schema: 
          type: string
      - name: "page"
        in: "path"
        required: true
        description: "Page number to get"
        schema: 
          type: string
      - name: "length"
        in: "path"
        required: true
        description: "How many results per page"
        schema: 
          type: string
      responses:
        200: 
          description: "Successful search"
  /search/races/{query}: 
    get: 
      tags:
        - "search"
      summary: "Search for a race"
      parameters: 
      - name: "query"
        in: "path"
        required: true
        description: "Search query"
        schema: 
          type: string
      responses:
        200: 
          description: "Successful search"
  /search/user/races/{query}: 
    get: 
      tags: 
      - "search"
      summary: "Search through a user's race"
      parameters: 
      - name: "query"
        in: "path"
        required: true
        description: "Search query"
        schema: 
          type: string
      responses:
        200: 
          description: "Successful search"
  /news: 
    get:
      tags: 
      - "news"
      summary: "Get a list of news posts"
      responses: 
        200: 
          description: "Successfully fetched post list"
  /news/{url}:
    get: 
      tags: 
      - "news"
      summary: "Get a specific news post with metadata"
      parameters: 
      - name: "url"
        in: "path"
        required: true
        description: "URL of post to get"
        schema: 
          type: string
      responses:
        200: 
          description: "Successfully fetchd post"
  /result/count: 
    get: 
      tags: 
      - "result"
      summary: "Get the current number of results in the database"
      responses: 
        200: 
          description: "Successfully fetched results count"
  /result/teamlist/{id}/{gender}/{event}:
    get: 
      tags: 
      - "result"
      summary: "Get team scores for a race"
      parameters: 
      - name: "id"
        in: "path"
        required: true
        description: "ID of race"
        schema: 
          type: string
      - name: "gender"
        in: "path"
        required: true
        description: "Gender to get"
        schema: 
          type: string
      - name: "event"
        in: "path"
        required: true
        description: "Event to get"
        schema: 
          type: string
      responses:
        200: 
          description: "Successfully fetched team scores"
  /result/list/team/{id}/{gender}/years: 
    get: 
      tags: 
      - "result"
      summary: "Get the years of competition for a team"
      parameters: 
        - name: "id"
          in: "path" 
          required: true
          description: "Team ID"
          schema: 
            type: string
        - name: "gender"
          in: "path"
          required: true
          description: "Gender to get"
          schema: 
            type: string
      responses: 
        200: 
          description: "Successfully fetched years"
  /result/list/team/{id}/{year}:
    get: 
      tags: 
      - "result"
      summary: "Get results for a specific team and year"
      parameters: 
        - name: "id"
          in: "path" 
          required: true
          description: "Team ID"
          schema: 
            type: string
        - name: "year"
          in: "path"
          required: true
          description: "Year to get"
          schema: 
            type: string
      responses: 
        200: 
          description: "Successfully fetched results"
  /result/list/team/{id}/{year}/{gender}:
    get: 
      tags: 
        - "result"
      summary: "Get results for a specific team, year, and gender"
      parameters: 
        - name: "id"
          in: "path" 
          required: true
          description: "Team ID"
          schema: 
            type: string
        - name: "year"
          in: "path"
          required: true
          description: "Year to get"
          schema: 
            type: string
        - name: "gender"
          in: "path"
          required: true
          description: "Gender to get"
          schema: 
            type: string
      responses: 
        200: 
          description: "Successfully fetched results"
  /result/list/athlete/{id}: 
    get: 
      tags: 
      - "result"
      summary: "Get results for a specific athlete"
      parameters: 
        - name: "id"
          in: "path" 
          required: true
          description: "Athlete ID"
          schema: 
            type: string
      responses: 
        200: 
          description: "Successfully fetched results"
  /result/list/{id}/{gender}/{event}:
    get: 
      tags: 
      - "result"
      summary: "Get results for a race with a specified gender and event"
      parameters: 
        - name: "id"
          in: "path" 
          required: true
          description: "Race ID"
          schema: 
            type: string
        - name: "gender"
          in: "path"
          required: true
          description: "Gender to get"
          schema: 
            type: string
        - name: "event"
          in: "path"
          required: true
          description: "Event to get"
          schema: 
            type: string
      responses: 
        200: 
          description: "Successfully fetched results"
  /result: 
    post:
      tags:
      - "result"
      summary: "Create a new result"
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Result'
      responses: 
        500: 
          description: "Server Error"
  /result/{id}:
    parameters: 
    - name: "id"
      in: "path"
      required: true
      description: "Result's ID"
      schema: 
        type: string
    put: 
      tags: 
      - "result"
      summary: "Update a result"
      responses: 
        200: 
          description: "Successfully updated result"
          content: 
            application/json: 
              schema: 
                $ref: "#/components/schemas/Result"
    delete: 
      tags: 
      - "result"
      summary: "Delete a result"
      responses: 
        200: 
          description: "Successfully deleted result"
  /race/list/{page}/{length}: 
    get: 
      tags:
      - "race"
      summary: "Get a list of races"
      parameters: 
      - name: "page"
        in: "path"
        required: true
        description: "Page number to get"
        schema: 
          type: string
      - name: "length"
        in: "path"
        required: true
        description: "How many races per page"
        schema: 
          type: string
      responses:
        200: 
          description: "Successfully fetched races"
  /race/list: 
    get: 
      tags: 
      - "race"
      summary: "Get a complete list of races"
      responses:
        200: 
          description: "Successfully fetched races"
  /race/{id}: 
    parameters: 
      - name: "id"
        in: "path"
        required: true
        description: "Race ID"
        schema: 
          type: string
    get: 
      tags: 
      - "race"
      summary: "Get a specific race"
      responses: 
        200: 
          description: "Successfully fetched race"
    put: 
      tags: 
      - "race"
      summary: "Update a specific race"
      responses: 
        200: 
          description: "Successfully updated race"
    delete: 
      tags: 
      - "race"
      summary: "Delete a race"
      responses: 
        200: 
          description: "Successfully deleted"
  /race/{id}/{gender}/events: 
    get: 
      tags: 
      - "race"
      summary: "Get events list for a specific race"
      parameters: 
        - name: "id"
          in: "path" 
          required: true
          description: "Race ID"
          schema: 
            type: string
        - name: "gender"
          in: "path"
          required: true
          description: "Gender to get"
          schema: 
            type: string
      responses: 
        200: 
          description: "Successfully fetched event list"
  /race/vote/{id}:
    get: 
      tags: 
      - "race"
      summary: "Get vote data for user and race"
      parameters: 
        - name: "id"
          in: "path" 
          required: true
          description: "Race ID"
          schema: 
            type: string
      responses: 
        200: 
          description: "Successfully fetched vote data"
  /race/upvote/{id}:
    post: 
      tags: 
      - "race"
      summary: "Upvote a race"
      parameters: 
        - name: "id"
          in: "path" 
          required: true
          description: "Race ID"
          schema: 
            type: string
      responses: 
        200: 
          description: "Successfully upvoted race"
  /race/downvote/{id}:
    post: 
      tags: 
      - "race"
      summary: "Downvote a race"
      parameters: 
        - name: "id"
          in: "path" 
          required: true
          description: "Race ID"
          schema: 
            type: string
      responses: 
        200: 
          description: "Successfully downvoted race"
  /race: 
    post: 
      tags: 
      - "race"
      summary: "Create a new race"
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Race'
      responses: 
        500: 
          description: "Server Error"
    
components: 
  schemas: 
    User: 
      required: 
        - name
        - email
        - password
      properties: 
        id: 
          type: string
        name: 
          type: string
        email: 
          type: string
        password: 
          type: string
        athlete_id:
          type: string
    Race: 
      required: 
        - name
        - date
        - user
        - user_id
      properties: 
        id: 
          type: string
        name: 
          type: string
        date: 
          type: string
        user: 
          type: string
        user_id:
          type: string
        location:
          type: string
        upvotes: 
          type: number
        downvotes: 
          type: number
        link: 
          type: string
    Races:
      type: array
      items: 
        $ref: "#/components/schemas/Race"
    Result: 
      properties: 
        id: 
          type: string
        time: 
          type: string
        athlete: 
          type: string
        athlete_id: 
          type: string
        verified: 
          type: boolean
        user: 
          type: string
        user_id: 
          type: string
        race:
          type: string
        race_id:
          type: string
        womens: 
          type: boolean
        team: 
          type: string
        team_id: 
          type: string
        place: 
          type: number
        event: 
          type: string
        date: 
          type: object
    File: 
      properties: 
        url: 
          type: string
        public_id: 
          type: string
